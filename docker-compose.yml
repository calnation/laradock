version: '2'

services:

### Applications Code Container #############################

    applications:
    #  restart: always
      build: ./mediawiki
      command: [ "sleep", "9" ]
#      entrypoint: /var/www/init.sh
      container_name: mw-app
      volumes:
        - app_vol_mw:/app/mediawiki
      environment:
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
        - MW_DB_SERVER=${MW_DB_SERVER}
        - MW_INSTALL_PATH=/var/www/mediawiki
        - IP=${MW_INSTALL_PATH}
        - MW_DB_NAME=${PERCONA_DATABASE}
        - MW_DB_PASSWORD=${PERCONA_PASSWORD}
        - MW_DB_PORT=${PERCONA_PORT}
        - MW_DB_PREFIX=${MW_DB_PREFIX}
        - MW_DB_TABLE_OPTIONS=${MW_DB_TABLE_OPTIONS}
        - MW_DB_TYPE=${MW_DB_TYPE}
        - MW_DB_USER=${PERCONA_USER}
        - MW_DEFAULT_SKIN=${MW_DEFAULT_SKIN}
        - MW_EMERGENCY_CONTACT=${ADMIN_EMAIL}
        - MW_ENABLE_DEBUG=${MW_ENABLE_DEBUG}
        - MW_ENABLE_HTTPS=${MW_ENABLE_HTTPS}
        - MW_ENABLE_SMTP=${MW_ENABLE_SMTP}
        - MW_ENABLE_UPLOADS=${MW_ENABLE_UPLOADS}
        - MW_LANGUAGE_CODE=${MW_LANGUAGE_CODE}
        - MW_MAX_UPLOAD_SIZE=${MW_MAX_UPLOAD_SIZE}
        - MW_META_NAMESPACE=${MW_SITENAME}
        - MW_PASSWORD_SENDER=${MW_PASSWORD_SENDER}
        - MW_SECRET_KEY=${MW_SECRET_KEY}
        - MW_SERVER=${MW_SERVER}
        - MW_SHARED_DB=${MW_SHARED_DB}
        - MW_SITENAME=${MW_SITENAME}
        - MW_SMTP_AUTH=${SMTP_AUTH}
        - MW_SMTP_HOST=${SMTP_HOST}
        - MW_SMTP_IDHOST=${SMTP_IDHOST}
        - MW_SMTP_PASSWORD=${SMTP_PASSWORD}
        - MW_SMTP_PORT=${SMTP_PORT}
        - MW_SMTP_SSL_VERIFY_PEER=${SMTP_SSL_VERIFY_PEER}
        - MW_SMTP_USERNAME=${SMTP_USERNAME}
        - MW_UPGRADE_KEY=${MW_UPGRADE_KEY}
        - TZ=${TIMEZONE}
#      networks:
#        frontend:
#          ipv4_address: 172.27.1.2

### MediaWiki Extensions Container #############################

    mw-extensions:
    #  restart: always
      build: ./mediawiki-extensions
      command: [ "sleep", "9" ]
      container_name: mw-app-ext
      volumes:
        - app_vol_mw_ext:/app/mediawiki/extensions
        - app_vol_mw_skin:/app/mediawiki/skins
      depends_on:
        - applications
      environment:
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}

### parsoid Container ####################################

    parsoid:
      restart: unless-stopped
      build: ./parsoid
      container_name: mw-parsoid
      environment:
        APP_URL: ${APP_URL}
      hostname: parsoid
      links:
        - php-fpm
      networks:
        - frontend

### restbase Container ####################################

    restbase:
      restart: unless-stopped
      build: ./restbase
      container_name: mw-restbase
      environment:
        APP_URL: ${APP_URL}
      links:
        - php-fpm
      networks:
        - frontend

### Workspace Utilities Container ###########################

    workspace:
      build:
        context: ./workspace
        args:
          - INSTALL_XDEBUG=${WORKSPACE_INSTALL_XDEBUG}
          - INSTALL_BLACKFIRE=${INSTALL_BLACKFIRE}
          - INSTALL_SOAP=${WORKSPACE_INSTALL_SOAP}
          - INSTALL_MONGO=${WORKSPACE_INSTALL_MONGO}
          - INSTALL_MSSQL=${WORKSPACE_INSTALL_MSSQL}
          - INSTALL_NODE=${WORKSPACE_INSTALL_NODE}
          - INSTALL_YARN=${WORKSPACE_INSTALL_YARN}
          - INSTALL_DRUSH=${WORKSPACE_INSTALL_DRUSH}
          - INSTALL_AEROSPIKE_EXTENSION=${WORKSPACE_INSTALL_AEROSPIKE_EXTENSION}
          - INSTALL_V8JS_EXTENSION=${WORKSPACE_INSTALL_INSTALL_V8JS_EXTENSION}
          - COMPOSER_GLOBAL_INSTALL=${WORKSPACE_COMPOSER_GLOBAL_INSTALL}
          - INSTALL_WORKSPACE_SSH=${WORKSPACE_INSTALL_WORKSPACE_SSH}
          - INSTALL_LARAVEL_ENVOY=${WORKSPACE_INSTALL_LARAVEL_ENVOY}
          - INSTALL_DEPLOYER=${WORKSPACE_INSTALL_DEPLOYER}
          - INSTALL_LINUXBREW=${WORKSPACE_INSTALL_LINUXBREW}
          - INSTALL_MC=${WORKSPACE_INSTALL_MC}
          - PUID=${WORKSPACE_PUID}
          - PGID=${WORKSPACE_PGID}
          - NODE_VERSION=${WORKSPACE_NODE_VERSION}
          - YARN_VERSION=${WORKSPACE_YARN_VERSION}
          - TZ=${TIMEZONE}
          - BLACKFIRE_CLIENT_ID=${BLACKFIRE_CLIENT_ID}
          - BLACKFIRE_CLIENT_TOKEN=${BLACKFIRE_CLIENT_TOKEN}
        dockerfile: "Dockerfile-${PHP_VERSION}"
      volumes_from:
        - applications
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      ports:
        - "${WORKSPACE_SSH_PORT}:22"
      tty: true
      networks:
        - frontend
        - backend

### PHP-FPM Container #######################################

    php-fpm:
#      restart: always
      container_name: mw-php-fpm
#      command: bash /var/www/init.sh
#      entrypoint: ["php-fpm"]
#      command: ["bash", "/var/www/runnables/init.sh"]
      build:
        context: ./php-fpm
        args:
          - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
          - INSTALL_BLACKFIRE=${INSTALL_BLACKFIRE}
          - INSTALL_COMPOSER=${PHP_FPM_INSTALL_COMPOSER}
          - INSTALL_SOAP=${PHP_FPM_INSTALL_SOAP}
          - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGO}
          - INSTALL_MSSQL=${PHP_FPM_INSTALL_MSSQL}
          - INSTALL_NODE=${PHP_FPM_INSTALL_NODE}
          - INSTALL_ZIP_ARCHIVE=${PHP_FPM_INSTALL_ZIP_ARCHIVE}
          - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
          - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
          - INSTALL_MEMCACHED=${PHP_FPM_INSTALL_MEMCACHED}
          - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
          - INSTALL_EXIF=${PHP_FPM_INSTALL_EXIF}
          - INSTALL_AEROSPIKE_EXTENSION=${PHP_FPM_INSTALL_AEROSPIKE_EXTENSION}
          - INSTALL_V8JS_EXTENSION=${PHP_FPM_INSTALL_INSTALL_V8JS_EXTENSION}
          - COMPOSER_GLOBAL_INSTALL=${PHP_FPM_COMPOSER_GLOBAL_INSTALL}
          - INSTALL_SSH=${PHP_FPM_INSTALL_SSH}
          - PUID=${PHP_FPM_PUID}
          - PGID=${PHP_FPM_PGID}
          - NODE_VERSION=${PHP_FPM_NODE_VERSION}
          - TZ=${TIMEZONE}
          - INSTALL_IMAGEMAGICK=${PHP_FPM_INSTALL_IMAGEMAGICK}
          - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
          - INSTALL_TOKENIZER=${PHP_FPM_INSTALL_TOKENIZER}
          - INSTALL_INTL=${PHP_FPM_INSTALL_INTL}
          - INSTALL_GHOSTSCRIPT=${PHP_FPM_INSTALL_GHOSTSCRIPT}
          - INSTALL_NET_SMTP=${PHP_FPM_INSTALL_NET_SMTP}
          - INSTALL_PCNTL=${PHP_FPM_INSTALL_PCNTL}
          - INSTALL_APCU=${PHP_FPM_INSTALL_APCU}
          - INSTALL_MBSTRING=${PHP_FPM_INSTALL_MBSTRING}
        dockerfile: "Dockerfile-${PHP_VERSION}"
      stdin_open: true
      tty: true
      volumes:
        - app_vol_mw:${MW_INSTALL_PATH}
        - app_vol_mw_ext:${MW_INSTALL_PATH}/extensions
        - app_vol_mw_skin:${MW_INSTALL_PATH}/skins
        - ${MW_SETTINGS_PATH}:${MW_INSTALL_PATH}/settings.d
        - ./mediawiki/runnables:${MW_INSTALL_PATH}/runnables
        - ./mediawiki-extensions/ext_settings.d/:${MW_INSTALL_PATH}/ext_settings.d
        - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
      expose:
        - "9000"
      depends_on:
        - applications
        - percona
      extra_hosts:
        - "dockerhost:${DOCKER_HOST_IP}"
      ports:
        - "${PHP_FPM_SSH_PORT}:22"
        - 4881:4881
      environment:
        - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
        - MW_DB_PREFIX=${MW_DB_PREFIX}
        - MW_DB_SERVER=${MW_DB_SERVER}
        - IP=${MW_INSTALL_PATH}
        - MW_DB_NAME=${PERCONA_DATABASE}
        - MW_DB_PASSWORD=${PERCONA_PASSWORD}
        - MW_DB_PORT=${PERCONA_PORT}
        - MW_DB_USER=${PERCONA_USER}
        - MW_EMERGENCY_CONTACT=${ADMIN_EMAIL}
        - MW_DB_TABLE_OPTIONS=${MW_DB_TABLE_OPTIONS}
        - MW_DB_TYPE=${MW_DB_TYPE}
        - MW_DEFAULT_SKIN=${MW_DEFAULT_SKIN}
        - MW_ENABLE_DEBUG=${MW_ENABLE_DEBUG}
        - MW_ENABLE_HTTPS=${MW_ENABLE_HTTPS}
        - MW_ENABLE_SMTP=${MW_ENABLE_SMTP}
        - MW_ENABLE_UPLOADS=${MW_ENABLE_UPLOADS}
        - MW_INSTALL_PATH=${MW_INSTALL_PATH}
        - MW_LANGUAGE_CODE=${MW_LANGUAGE_CODE}
        - MW_MAX_UPLOAD_SIZE=${MW_MAX_UPLOAD_SIZE}
        - MW_META_NAMESPACE=${MW_SITENAME}
        - MW_PASSWORD_SENDER=${MW_PASSWORD_SENDER}
        - MW_SECRET_KEY=${MW_SECRET_KEY}
        - MW_SERVER=${MW_SERVER}
        - MW_SHARED_DB=${MW_SHARED_DB}
        - MW_SITENAME=${MW_SITENAME}
        - MW_UPGRADE_KEY=${MW_UPGRADE_KEY}
        - MW_ADMIN=${MW_ADMIN}
        - MW_SETTINGS_PATH=${MW_SETTINGS_PATH}
        - MW_SMTP_AUTH=${SMTP_AUTH}
        - MW_SMTP_HOST=${SMTP_HOST}
        - MW_SMTP_IDHOST=${SMTP_IDHOST}
        - MW_SMTP_PASSWORD=${SMTP_PASSWORD}
        - MW_SMTP_PORT=${SMTP_PORT}
        - MW_SMTP_SSL_VERIFY_PEER=${SMTP_SSL_VERIFY_PEER}
        - MW_SMTP_USERNAME=${SMTP_USERNAME}
        - TZ=${TIMEZONE}
      networks:
        - backend

### PHP Worker Container #####################################

    php-worker:
      build:
        context: ./php-worker
      volumes_from:
        - applications
      depends_on:
        - workspace
      networks:
        - backend

### Nginx Server Container ##################################

    nginx:
#      restart: unless-stopped
      container_name: mw-nginx
      build:
        context: ./nginx
        args:
          - PHP_UPSTREAM=php-fpm
      volumes:
        - app_vol_mw:${MW_INSTALL_PATH}
        - app_vol_mw_ext:${MW_INSTALL_PATH}/extensions
        - app_vol_mw_skin:${MW_INSTALL_PATH}/skins
        - ${MW_SETTINGS_PATH}:${MW_INSTALL_PATH}/settings.d
        - ./mediawiki-extensions/ext_settings.d/:${MW_INSTALL_PATH}/ext_settings.d
        - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
        - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
      environment:
        - MW_DB_SERVER=${MW_DB_SERVER}
        - MW_INSTALL_PATH=${MW_INSTALL_PATH}
        - IP=${MW_INSTALL_PATH}
        - MW_DB_NAME=${PERCONA_DATABASE}
        - MW_DB_PASSWORD=${PERCONA_PASSWORD}
        - MW_DB_PORT=${PERCONA_PORT}
        - MW_DB_PREFIX=${MW_DB_PREFIX}
        - MW_DB_TABLE_OPTIONS=${MW_DB_TABLE_OPTIONS}
        - MW_DB_TYPE=${MW_DB_TYPE}
        - MW_DB_USER=${PERCONA_USER}
        - MW_DEFAULT_SKIN=${MW_DEFAULT_SKIN}
        - MW_EMERGENCY_CONTACT=${ADMIN_EMAIL}
        - MW_ENABLE_DEBUG=${MW_ENABLE_DEBUG}
        - MW_ENABLE_HTTPS=${MW_ENABLE_HTTPS}
        - MW_ENABLE_SMTP=${MW_ENABLE_SMTP}
        - MW_ENABLE_UPLOADS=${MW_ENABLE_UPLOADS}
        - MW_LANGUAGE_CODE=${MW_LANGUAGE_CODE}
        - MW_MAX_UPLOAD_SIZE=${MW_MAX_UPLOAD_SIZE}
        - MW_META_NAMESPACE=${MW_SITENAME}
        - MW_PASSWORD_SENDER=${MW_PASSWORD_SENDER}
        - MW_SECRET_KEY=${MW_SECRET_KEY}
        - MW_SERVER=${MW_SERVER}
        - MW_SHARED_DB=${MW_SHARED_DB}
        - MW_SITENAME=${MW_SITENAME}
        - MW_SMTP_AUTH=${SMTP_AUTH}
        - MW_SMTP_HOST=${SMTP_HOST}
        - MW_SMTP_IDHOST=${SMTP_IDHOST}
        - MW_SMTP_PASSWORD=${SMTP_PASSWORD}
        - MW_SMTP_PORT=${SMTP_PORT}
        - MW_SMTP_SSL_VERIFY_PEER=${SMTP_SSL_VERIFY_PEER}
        - MW_SMTP_USERNAME=${SMTP_USERNAME}
        - MW_UPGRADE_KEY=${MW_UPGRADE_KEY}
        - MW_UPLOAD_BASE_URL=${MW_UPLOAD_BASE_URL}
        - TZ=${TIMEZONE}
      ports:
        - "${NGINX_HOST_HTTP_PORT}:80"
        - "${NGINX_HOST_HTTPS_PORT}:443"
      depends_on:
        - php-fpm
#    - parsoid
      networks:
        - frontend
        - backend
#        - proxy-tier

### Nginx Reverse Proxy Container ##################################

#    nginx-gen:
#      image: jwilder/docker-gen
#      container_name: nginx-gen
#      volumes:
#        - "/var/run/docker.sock:/tmp/docker.sock:ro"
#        - "../../../volumes/proxy/templates/nginx-compose-v2.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro"
#      volumes_from:
#        - nginx
#      entrypoint: /usr/local/bin/docker-gen -notify-sighup nginx -watch -only-exposed -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf

### Nginx Reverse Proxy Container ##################################

#    letsencrypt-nginx-proxy-companion:
#      image: jrcs/letsencrypt-nginx-proxy-companion
#      container_name: letsencrypt-nginx-proxy-companion
#      volumes_from:
#        - nginx
#      volumes:
#        - "/var/run/docker.sock:/var/run/docker.sock:ro"
#        - "../../../volumes/proxy/certs:/etc/nginx/certs:rw"
#      environment:
#        - NGINX_DOCKER_GEN_CONTAINER=nginx-gen

### Nginx Reverse Proxy Container ##################################

#    nginx-reverse:
#      restart: unless-stopped
#      container_name: mw-nginx-reverse
#      build:
#        context: ./nginx-reverse
#        args:
#          - USE_SSL=${USE_SSL}
#      volumes:
#        - /root/nginx/ssl:/etc/nginx/certs
#        - /root/nginx/htpasswd:/etc/nginx/htpasswd
#        - /var/run/docker.sock:/tmp/docker.sock:ro
#      ports:
#        - "${NGINX_HOST_HTTP_PORT}:80"
#        - "${NGINX_HOST_HTTPS_PORT}:443"
#      depends_on:
#        - php-fpm
#        - applications
#      networks:
#        - frontend
#        - backend

### Blackfire Container #################################

    blackfire:
      image: blackfire/blackfire
      environment:
        - BLACKFIRE_SERVER_ID=${BLACKFIRE_SERVER_ID}
        - BLACKFIRE_SERVER_TOKEN=${BLACKFIRE_SERVER_TOKEN}
      depends_on:
        - php-fpm
      networks:
        - backend

### Apache Server Container #################################

    apache2:
      build:
        context: ./apache2
        args:
          - PHP_SOCKET=${PHP_SOCKET}
      volumes_from:
        - applications
      volumes:
        - ${APACHE_HOST_LOG_PATH}:/var/log/apache2
        - ./apache2/sites:/etc/apache2/sites-available
      ports:
        - "${APACHE_HOST_HTTP_PORT}:80"
        - "${APACHE_HOST_HTTPS_PORT}:443"
      depends_on:
        - php-fpm
      networks:
        - frontend
        - backend

### HHVM Container ##########################################

    hhvm:
      build: ./hhvm
      volumes_from:
        - applications
      expose:
        - "9000"
      depends_on:
        - workspace
      networks:
        - frontend
        - backend

### Minio Container #########################################

    minio:
      build: ./minio
      volumes:
        - minio:/export
      ports:
        - "${MINIO_PORT}:9000"
      environment:
        - MINIO_ACCESS_KEY=access
        - MINIO_SECRET_KEY=secretkey
      networks:
        - frontend

### MySQL Container #########################################

    mysql:
      container_name: mw-db
#      restart: unless-stopped
      build:
        context: ./mysql
      environment:
        - MYSQL_DATABASE=${MYSQL_DATABASE}
        - MYSQL_USER=${MYSQL_USER}
        - MYSQL_PASSWORD=${MYSQL_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      volumes:
        - ${DATA_SAVE_PATH}/mysql:/var/lib/mysql
#        - convoy_db_vol:/var/lib/mysql
#      volume_driver: convoy
      ports:
        - "${MYSQL_PORT}:3306"
      networks:
        - backend

### Percona Container #########################################

    percona:
      build:
        context: ./percona
      environment:
        - MYSQL_DATABASE=${PERCONA_DATABASE}
        - MYSQL_USER=${PERCONA_USER}
        - MYSQL_PASSWORD=${PERCONA_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${PERCONA_ROOT_PASSWORD}
      volumes:
        - percona:/var/lib/mysql
      ports:
        - "${PERCONA_PORT}:3306"
      networks:
        - backend

### MSSQL Container #########################################

    mssql:
      build:
        context: ./mssql
      environment:
        - MSSQL_DATABASE=${MSSQL_DATABASE}
        - SA_PASSWORD=${MSSQL_PASSWORD}
        - ACCEPT_EULA=Y
      volumes:
        - ${DATA_SAVE_PATH}/mssql:/var/opt/mssql
      ports:
        - "${MSSQL_PORT}:1433"
      networks:
        - backend

### MariaDB Container #######################################

    mariadb:
#      restart: unless-stopped
      container_name: mw-db
      build: ./mariadb
      volumes:
        - ${DATA_SAVE_PATH}/mariadb:/var/lib/mysql
#        - convoy_db_vol:/var/lib/mysql
#      volume_driver: convoy
      ports:
        - "${MARIADB_PORT}:3306"
      environment:
        - MYSQL_DATABASE=${MARIADB_DATABASE}
        - MYSQL_USER=${MARIADB_USER}
        - MYSQL_PASSWORD=${MARIADB_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
      networks:
        - backend

### PostgreSQL Container ####################################

    postgres:
      build: ./postgres
      volumes:
        - ${DATA_SAVE_PATH}/postgres:/var/lib/postgresql/data
      ports:
        - "${POSTGRES_PORT}:5432"
      environment:
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      networks:
        - backend

### PostgreSQL PostGis Container ############################

    postgres-postgis:
      build: ./postgres-postgis
      volumes:
        - ${DATA_SAVE_PATH}/postgres:/var/lib/postgresql/data
      ports:
        - "${POSTGRES_PORT}:5432"
      environment:
        - POSTGRES_DB=${POSTGRES_DB}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      networks:
        - backend

### Neo4j Container #########################################

    neo4j:
      build: ./neo4j
      ports:
        - "7474:7474"
        - "1337:1337"
      environment:
        - NEO4J_AUTH=default:secret
      volumes:
        - ${DATA_SAVE_PATH}/neo4j:/var/lib/neo4j/data
      networks:
        - backend

### MongoDB Container #######################################

    mongo:
      build: ./mongo
      ports:
        - "27017:27017"
      volumes:
        - ${DATA_SAVE_PATH}/mongo:/data/db
      networks:
        - backend

### RethinkDB Container #######################################

    rethinkdb:
      build: ./rethinkdb
      ports:
        - "8090:8080"
      volumes:
        - ${DATA_SAVE_PATH}/rethinkdb:/data/rethinkdb_data
      networks:
        - backend

### Redis Container #########################################

    redis:
      build: ./redis
      volumes:
        - ${DATA_SAVE_PATH}/redis:/data
      ports:
        - "6379:6379"
      networks:
        - backend

### Aerospike c Container ###################################

    aerospike:
      build: ./aerospike
      volumes_from:
        - workspace
      volumes:
        - ${DATA_SAVE_PATH}/aerospike:/opt/aerospike/data
      ports:
        - "3000:3000"
        - "3001:3001"
        - "3002:3002"
        - "3003:3003"
      networks:
        - backend

### Memcached Container #####################################

    memcached:
      build: ./memcached
      volumes:
        - ${DATA_SAVE_PATH}/memcached:/var/lib/memcached
      ports:
        - "${MEMCACHED_HOST_PORT}:11211"
      depends_on:
        - php-fpm
      networks:
        - backend

### Beanstalkd Container ####################################

    beanstalkd:
      build: ./beanstalkd
      ports:
        - "${BEANSTALKD_HOST_PORT}:11300"
      privileged: true
      depends_on:
        - php-fpm
      networks:
        - backend

### RabbitMQ Container ######################################

    rabbitmq:
      build: ./rabbitmq
      ports:
        - "${RABBITMQ_NODE_HOST_PORT}:5672"
        - "${RABBITMQ_MANAGEMENT_HTTP_HOST_PORT}:15672"
        - "${RABBITMQ_MANAGEMENT_HTTPS_HOST_PORT}:15671"
      privileged: true
      environment:
        - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
        - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      depends_on:
        - php-fpm
      networks:
        - backend

### Beanstalkd Console Container ############################

    beanstalkd-console:
      build: ./beanstalkd-console
      ports:
        - "2080:2080"
      depends_on:
        - beanstalkd
      networks:
        - backend

### Caddy Server Container ##################################

    caddy:
      build: ./caddy
      ports:
        - "80:80"
        - "443:443"
        - "2015:2015"
      volumes_from:
        - applications
      volumes:
        - ./caddy/Caddyfile:/etc/Caddyfile
        - ./logs/caddy:/var/log/caddy
        - caddy:/root/.caddy
      depends_on:
        - php-fpm
      networks:
        - frontend
        - backend

### phpMyAdmin Container ####################################

    phpmyadmin:
      build: ./phpmyadmin
      environment:
        - PMA_ARBITRARY=1
        - MYSQL_USER=${PMA_USER}
        - MYSQL_PASSWORD=${PMA_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${PMA_ROOT_PASSWORD}
      ports:
        - "${PMA_PORT}:80"
      depends_on:
        - "${PMA_DB_ENGINE}"
      networks:
        - frontend
        - backend

### Adminer Container ####################################

    adminer:
      build: ./adminer
      ports:
        - "${ADM_PORT}:8080"
      depends_on:
        - php-fpm
      networks:
        - frontend
        - backend

### pgAdmin Container #######################################

    pgadmin:
      build: ./pgadmin
      ports:
        - "5050:5050"
      depends_on:
        - postgres
      networks:
        - frontend
        - backend

### ElasticSearch Container #################################

    elasticsearch:
      build: ./elasticsearch
      volumes:
        - elasticsearch-data:/usr/share/elasticsearch/data
        - elasticsearch-plugins:/usr/share/elasticsearch/plugins
      ports:
        - "${ELASTICSEARCH_HOST_HTTP_PORT}:9200"
        - "${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300"
      depends_on:
        - php-fpm
      networks:
        - frontend
        - backend

### Certbot Container ##################################

    certbot:
      build:
        context: ./certbot
      volumes:
        - ./data/certbot/certs/:/var/certs
        - ./certbot/letsencrypt/:/var/www/letsencrypt
      environment:
        - CN="fake.domain.com"
        - EMAIL="fake.email@gmail.com"
      networks:
        - frontend

### Mailhog Container #########################################

    mailhog:
      build: ./mailhog
      ports:
        - "1025:1025"
        - "8025:8025"
      networks:
        - frontend

### Selenium Container ########################################

    selenium:
      build: ./selenium
      ports:
        - "${SELENIUM_PORT}:4444"
      volumes:
        - /dev/shm:/dev/shm
      networks:
        - frontend

### Varnish Proxy 1 ##########################################

    proxy:
      build: ./varnish
      expose:
        - ${VARNISH_PORT}
      environment:
        - VARNISH_CONFIG=${VARNISH_CONFIG}
        - CACHE_SIZE=${VARNISH_PROXY1_CACHE_SIZE}
        - VARNISHD_PARAMS=${VARNISHD_PARAMS}
        - VARNISH_PORT=${VARNISH_PORT}
        - BACKEND_HOST=${VARNISH_PROXY1_BACKEND_HOST}
        - BACKEND_PORT=${VARNISH_BACKEND_PORT}
        - VARNISH_SERVER=${VARNISH_PROXY1_SERVER}
      links:
        - workspace
      networks:
        - frontend

### Varnish Proxy 2 ##########################################

    proxy2:
      build: ./varnish
      expose:
        - ${VARNISH_PORT}
      environment:
        - VARNISH_CONFIG=${VARNISH_CONFIG}
        - CACHE_SIZE=${VARNISH_PROXY2_CACHE_SIZE}
        - VARNISHD_PARAMS=${VARNISHD_PARAMS}
        - VARNISH_PORT=${VARNISH_PORT}
        - BACKEND_HOST=${VARNISH_PROXY2_BACKEND_HOST}
        - BACKEND_PORT=${VARNISH_BACKEND_PORT}
        - VARNISH_SERVER=${VARNISH_PROXY2_SERVER}
      links:
        - workspace
      networks:
        - frontend

### Balancer Haproxy ##########################################

    balancer:
      build: ./haproxy
      ports:
        - "${HAPROXY_HOST_HTTP_PORT}:8085"
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
      links:
        - proxy
        - proxy2

### Jenkins ###################################################
    jenkins:
      build: ./jenkins
      environment:
        JAVA_OPTS: "-Djava.awt.headless=true"
      ports:
        - "${JENKINS_HOST_SLAVE_AGENT_PORT}:50000"
        - "${JENKINS_HOST_HTTP_PORT}:8080"
      privileged: true
      volumes:
        - ${JENKINS_HOME}:/var/jenkins_home
        - /var/run/docker.sock:/var/run/docker.sock

### xhgui ###################################################

   xhgui:
     image: tehes/docker-xhgui
     ports:
       - "8040:80"
     links:
       - mongo

### Networks Setup ############################################
networks:
  frontend:
    driver: "bridge"
  backend:
    driver: "bridge"
#  proxy-tier:
#    external:
#      name: nginx-proxy

### Volumes Setup #############################################

volumes:
  app_vol_mw:
    driver: "local"
  app_vol_mw_ext:
    driver: "local"
  app_vol_mw_skin:
    driver: "local"
  percona:
    driver: "local"
  mssql:
    driver: "local"
  postgres:
    driver: "local"
  memcached:
    driver: "local"
  redis:
    driver: "local"
  neo4j:
    driver: "local"
  mariadb:
    driver: "local"
  mongo:
    driver: "local"
  minio:
    driver: "local"
  rethinkdb:
    driver: "local"
  phpmyadmin:
    driver: "local"
  adminer:
    driver: "local"
  aerospike:
    driver: "local"
  caddy:
    driver: "local"
  elasticsearch-data:
    driver: "local"
  elasticsearch-plugins:
    driver: "local"
